import 'dart:io';
import '../services/process_service.dart';

class GetAllCommand {
  final ProcessService _processService;

  GetAllCommand(this._processService);

  /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç dart pub get –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö —Å pubspec.yaml
  Future<int> execute({String? path, bool useFvm = false}) async {
    final startDir = Directory.current.path;
    final searchDir = path != null ? Directory(path).absolute.path : startDir;

    try {
      print(
          '\x1B[36müîç Searching for Dart/Flutter projects in: $searchDir\x1B[0m');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ —Å pubspec.yaml (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–∞–ø–∫—É)
      final projects = await _findDartProjects(Directory(searchDir));

      if (projects.isEmpty) {
        print('\x1B[33m‚ö† No Dart/Flutter projects found\x1B[0m');
        return 0;
      }

      print('\x1B[32müìÅ Found ${projects.length} projects:\x1B[0m');
      for (final project in projects) {
        final relativePath = _getRelativePath(project, searchDir);
        print('   - $relativePath');
      }

      print('');

      // –í—ã–ø–æ–ª–Ω—è–µ–º dart pub get –≤ –∫–∞–∂–¥–æ–º –ø—Ä–æ–µ–∫—Ç–µ
      final projectResults = <String, bool>{};

      for (final projectPath in projects) {
        final result =
            await _runPubGetInProject(projectPath, searchDir, useFvm);
        final relativePath = _getRelativePath(projectPath, searchDir);
        projectResults[relativePath] = result == 0;
      }

      // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Å –∫—Ä–∞—Å–∏–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      print('');
      print('=' * 50);
      print('üìä GET ALL SUMMARY');
      print('=' * 50);
      print('');
      _printProjectTree(searchDir, projectResults);
      print('');

      final successCount = projectResults.values.where((v) => v).length;
      final failCount = projectResults.values.where((v) => !v).length;

      print('Total projects: ${projectResults.length}');
      print('\x1B[32mSuccessful: $successCount\x1B[0m');

      if (failCount > 0) {
        print('\x1B[31mFailed: $failCount\x1B[0m');
        return 1;
      } else {
        print('\x1B[32mAll projects processed successfully! üéâ\x1B[0m');
        return 0;
      }
    } catch (e) {
      print('\x1B[31m‚ùå Error during get-all execution: $e\x1B[0m');
      return 1;
    } finally {
      Directory.current = startDir;
    }
  }

  /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–∞–ø–∫–∏ —Å pubspec.yaml, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  Future<List<String>> _findDartProjects(Directory directory) async {
    final projects = <String>[];
    final excludedFolders = _getExcludedFolders();
    final visited = <String>{};

    Future<void> searchRecursively(Directory dir) async {
      try {
        final canonicalPath = dir.absolute.path;

        // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ (—Å–∏–º–ª–∏–Ω–∫–∏)
        if (visited.contains(canonicalPath)) {
          return;
        }
        visited.add(canonicalPath);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        final List<FileSystemEntity> entities;
        try {
          entities = await dir.list().toList();
        } catch (e) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ pubspec.yaml –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        final pubspecFile =
            File('${dir.path}${Platform.pathSeparator}pubspec.yaml');
        if (await pubspecFile.exists()) {
          projects.add(dir.absolute.path);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        for (final entity in entities) {
          if (entity is Directory) {
            final dirName = entity.path.split(Platform.pathSeparator).last;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ (–Ω–æ –Ω–µ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å pubspec.yaml)
            if (excludedFolders.contains(dirName)) continue;

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
            await searchRecursively(entity);
          }
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø–∞–ø–∫–∞–º
      }
    }

    await searchRecursively(directory);
    return projects;
  }

  /// –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  void _printProjectTree(String basePath, Map<String, bool> results) {
    if (results.isEmpty) return;

    // –°—Ç—Ä–æ–∏–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    final tree = <String, dynamic>{};
    final baseDirName = _getLastSegment(basePath);

    for (final entry in results.entries) {
      final relativePath = entry.key;
      var current = tree;

      // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç (–ø—É—Å—Ç–æ–π –ø—É—Ç—å), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (relativePath.isEmpty) {
        current[baseDirName] = {'__result': entry.value};
        continue;
      }

      final parts = relativePath.split(Platform.pathSeparator);

      for (int i = 0; i < parts.length; i++) {
        final part = parts[i];

        if (i == parts.length - 1) {
          // –≠—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
          current[part] = {'__result': entry.value};
        } else {
          // –≠—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –ø–∞–ø–∫–∞
          if (!current.containsKey(part)) {
            current[part] = {};
          }
          current = current[part] as Map<String, dynamic>;
        }
      }
    }

    _printTreeNode(tree, '', true);
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏
  String _getLastSegment(String path) {
    final segments =
        path.split(Platform.pathSeparator).where((s) => s.isNotEmpty).toList();
    return segments.isNotEmpty ? segments.last : 'root';
  }

  /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —É–∑–ª—ã –¥–µ—Ä–µ–≤–∞
  void _printTreeNode(
    Map<String, dynamic> node,
    String prefix,
    bool isRoot,
  ) {
    final entries = node.entries.toList();

    for (int i = 0; i < entries.length; i++) {
      final entry = entries[i];
      final key = entry.key;
      final value = entry.value;
      final isLast = i == entries.length - 1;

      final connector = isRoot ? '' : (isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ');
      final nextPrefix = prefix + (isRoot ? '' : (isLast ? '    ' : '‚îÇ   '));

      if (value is Map && value.containsKey('__result')) {
        // –≠—Ç–æ –ø—Ä–æ–µ–∫—Ç
        final success = value['__result'] as bool;
        final icon = success ? '‚úÖ' : '‚ùå';

        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –ø–∞–ø–∫—É
        if (isRoot && entries.length > 1) {
          print('$prefix$icon $key/');

          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–∑–ª—ã
          final remainingNodes = <String, dynamic>{};
          for (int j = 0; j < entries.length; j++) {
            if (j != i) {
              remainingNodes[entries[j].key] = entries[j].value;
            }
          }
          _printTreeNode(remainingNodes, nextPrefix, false);
          break;
        } else {
          print('$prefix$connector$icon $key');
        }
      } else {
        // –≠—Ç–æ –ø–∞–ø–∫–∞ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏
        print('$prefix$connectorüì¶ $key/');
        _printTreeNode(value as Map<String, dynamic>, nextPrefix, false);
      }
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞
  List<String> _getExcludedFolders() {
    return [
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Flutter –ø–∞–ø–∫–∏
      'build',
      'ios',
      'android',
      'web',
      'linux',
      'macos',
      'windows',
      'bin',
      'lib',
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
      '.dart_tool',
      '.git',
      '.github',
      '.vscode',
      '.idea',
      'node_modules',
      // –ö—ç—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      '.pub-cache', '.gradle', '.m2', 'DerivedData', 'Pods',
      // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
      'doc', 'docs', 'documentation',
    ];
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç dart pub get –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
  Future<int> _runPubGetInProject(
    String projectPath,
    String basePath,
    bool useFvm,
  ) async {
    final projectName = projectPath.split(Platform.pathSeparator).last;
    final relativePath = _getRelativePath(projectPath, basePath);

    print('');
    print('\x1B[34müîÑ Processing: $projectName\x1B[0m');
    print('\x1B[90m  Path: $relativePath\x1B[0m');

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      final currentDir = Directory.current.path;

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
      Directory.current = projectPath;

      // –í—ã–ø–æ–ª–Ω—è–µ–º dart pub get
      final result = await _processService.runCommand(
        ['dart', 'pub', 'get'],
        useFvm: useFvm,
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ
      Directory.current = currentDir;

      if (result == 0) {
        print('\x1B[32m  ‚úÖ Success: $projectName\x1B[0m');
      } else {
        print('\x1B[31m  ‚ùå Failed: $projectName\x1B[0m');
      }

      return result;
    } catch (e) {
      print('\x1B[31m  ‚ùå Error in $projectName: $e\x1B[0m');
      return 1;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  String _getRelativePath(String fullPath, String basePath) {
    if (fullPath == basePath) {
      return ''; // –ö–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç
    }

    if (fullPath.startsWith(basePath)) {
      return fullPath.substring(basePath.length).replaceFirst(
            RegExp('^[${RegExp.escape(Platform.pathSeparator)}]+'),
            '',
          );
    }
    return fullPath;
  }
}
